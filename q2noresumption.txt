The second question of this assignment pursued a better understanding of how µC++ works by
translating a program written in that language into C++.

This way, we made use of functors, C++ objects that allow us to implement a dynamic fixup
routine. Instead of having the different handlers in the different parts of the code where the exceptions
are risen, a functor containing the corresponding fixup routine in each case (the handler that was
originally written in the catch clause of the father) is passed as an argument to the function
potentially throwing an exception. The convenient feature of µC++ which allowed us to do this with
_CatchResume clauses was substituted by an extra parameter when invoking the thrower function
to be used in case an exception was to be thrown.

It was tempting to try fixing this issue by passing the pointer to the fixup routine directly.
Unfortunately, this is not possible as there is more information to be transferred than the sole handler
to the exception thrown in the called instance of the function due to recursion. This way, the functor
not only contains the handler to the exception thrown in the current call but also that from the previous
call (which contains as well the handler from the previous one, recursively until the first of all calls).
